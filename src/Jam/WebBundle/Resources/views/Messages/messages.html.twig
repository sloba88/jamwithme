{% extends '::base.html.twig' %}

{% block body %}

    <h3>My Messages</h3>

    {# TODO: this must be re written with Backbone #}

    <div class="row">

    <div class="col-md-3 conversations-box"></div>

    <div class="col-md-9">
        <div class="conversation-message-box clearfix"></div>
        <textarea class="form-control send-message" maxlength="250" data-toid="" data-tousername="" rows="3" placeholder="Say something cool..." ></textarea>
    </div>

    </div>

    <script type="text/template" id="conversationTemplate">
        <% _.each( rc, function( c ){ %>
        <div class="conversation-box clearfix" data-user="<%- c.username %>" data-id="<%- c.id %>">
            <div class="col-md-3">
                <img src="{{ app.request.getBaseURL() }}/m/<%- c.username %>/avatar" class="img-circle" width="50" />
            </div>
            <div class="col-md-9">
                <h4><%- c.username %></h4>
            </div>
        </div>
        <% }); %>
    </script>

{% endblock %}

{% block javascripts %}

    <script>

        var myID = {{ app.user.id }};

        jQuery(document).ready(function() {

            setTimeout(function(){
                socket.emit('getMyMessages', { userID: 'myID' });
            },500);

            _.templateSettings.variable = "rc";
            var messageTemplate      = _.template($( "#messageTemplate" ).html());
            var conversationTemplate = _.template($( "#conversationTemplate" ).html());
            var conversations = [];

            socket.on('myMessages', function (data) {

                $.each(data, function( index, value ) {
                    $( ".conversation-message-box" ).append(messageTemplate( value ) );

                    $.each(value.messages, function( index, val ) {
                        var other;
                        if (val.to.id == myID){
                            other = val.from;
                        }else{
                            other = val.to;
                        }
                        if (!_.findWhere(conversations, other)){
                            conversations.push(other);
                        }
                    });
                });

                $( ".conversations-box" ).append( conversationTemplate( conversations ) );

                $(".conversation-box:first").click();
                scrollToBottom();

            });

            $(".conversations-box").on('click', '.conversation-box', function(e){
                //e.preventDefault();
                $(".conversation-box").removeClass('active');
                $(this).addClass('active');
                $(".conversation-message-box p").hide();
                var user = $(this).data('user');
                var userID = $(this).data('id');
                $('*[data-user="'+user+'"]').show();
                $('*[data-user2="'+user+'"]').show();
                $(".send-message").data('toid', userID);
                $(".send-message").data('tousername', user);
                scrollToBottom();

                //this conversation has been read
                setTimeout(function(){
                    socket.emit('conversationIsRead', { userID: userID });
                },500)
            });

        });
    </script>

{% endblock %}