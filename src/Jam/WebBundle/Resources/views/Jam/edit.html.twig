{% extends '::base.html.twig' %}

{% block body %}

    {{ form_start(form) }}

    <div class="col-md-6">

        {{ form_row(form.name) }}

        {{ form_row(form.description) }}

        {{ form_row(form.members_count) }}

        {{ form_row(form.genres) }}

        <ul id="jam_members" data-prototype="{{ form_widget(form.jamMembers.vars.prototype)|e }}" data-index="{{ form.jamMembers|length }}">
            {% for jm in form.jamMembers %}
                <li>
                    {{ form_errors(jm) }}
                    {% if form.vars.value.jamMembers[loop.index0].member == app.user %}
                        {{ form_label(jm.member) }}
                        {{ form_widget(jm.member, { 'attr': { 'disabled': true } }) }}
                        {{ form_label(jm.role) }}
                        {{ form_widget(jm.role) }}
                    {% else %}
                        {{ form_widget(jm) }}
                    {% endif %}
                </li>
            {% endfor %}
        </ul>

        <a href="#" id="add_another_member" class="btn bnt-default">{{ 'text.add.another.member'|trans }}</a>

    </div>

    <div class="col-md-6">
        <ul id="jam_images">

            {% for i in form.vars.value.images %}
                <div class="image-holder">
                    <a href="{{ asset(i.getWebPath) | imagine_filter('my_medium') }}"><img src="{{ asset(i.getWebPath) | imagine_filter('my_thumb') }}" /></a>
                    <a href="#" class="remove-image-ajax" data-url="{{ path('remove_image', {slug : form.vars.value.slug, id: i.id}) }}"><span class="glyphicon glyphicon-remove-sign"></span></a>
                    <div class="hidden">{{ form_widget(form.images[loop.index0]) }}</div>
                </div>
            {% endfor %}


            <input type="file" accept="image/*" name="file" id="jam_images_images_0_file" multiple>

            <div id="progress" class="progress">
                <div class="progress-bar progress-bar-success"></div>
            </div>

            <div id="files" class="files"></div>

        </ul>
    </div>

    <div class="col-md-12">
        {{ form_widget(form._token) }}

        {{ form_errors(form) }}

        {{ form_row(form.save) }}
    </div>

{% endblock %}

{% block javascripts %}
    <script src="/js/fileupload/vendor/jquery.ui.widget.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="http://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="/js/fileupload/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="/js/fileupload/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="/js/fileupload/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="/js/fileupload/jquery.fileupload-image.js"></script>
    <script>
        $(function () {

            var url = '{{ path('upload_jam_image', {'slug': form.vars.value.slug } ) }}';
                    uploadButton = $('<button/>')
                            .addClass('btn btn-primary')
                            .prop('disabled', true)
                            .text('Processing...')
                            .on('click', function (e) {
                                e.preventDefault();
                                var $this = $(this),
                                        data = $this.data();
                                $this
                                        .off('click')
                                        .text('Abort')
                                        .on('click', function () {
                                            $this.remove();
                                            data.abort();
                                        });
                                data.submit().always(function () {
                                    $this.remove();
                                });
                            });

        $('#jam_images_images_0_file').fileupload({
            url: url,
            dataType: 'json',
            autoUpload: false,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            maxFileSize: 5000000, // 5 MB
            // Enable image resizing, except for Android and Opera,
            // which actually support image resizing, but fail to
            // send Blob objects via XHR requests:
            disableImageResize: /Android(?!.*Chrome)|Opera/
                    .test(window.navigator.userAgent),
            previewMaxWidth: 100,
            previewMaxHeight: 100,
            imageMaxWidth: 800,
            imageMaxHeight: 800,
            imageCrop: true,
            previewCrop: true
        }).on('fileuploadadd', function (e, data) {
                    data.context = $('<div/>').appendTo('#files');
                    $.each(data.files, function (index, file) {
                        var node = $('<p/>')
                                .append($('<span/>').text(file.name));
                        if (!index) {
                            node
                                    .append('<br>')
                                    .append(uploadButton.clone(true).data(data));
                        }
                        node.appendTo(data.context);
                    });
                }).on('fileuploadprocessalways', function (e, data) {
                    var index = data.index,
                            file = data.files[index],
                            node = $(data.context.children()[index]);
                    if (file.preview) {
                        node
                                .prepend('<br>')
                                .prepend(file.preview);
                    }
                    if (file.error) {
                        node
                                .append('<br>')
                                .append($('<span class="text-danger"/>').text(file.error));
                    }
                    if (index + 1 === data.files.length) {
                        data.context.find('button')
                                .text('Upload')
                                .prop('disabled', !!data.files.error);
                    }
                }).on('fileuploadprogressall', function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                            'width',
                            progress + '%'
                    );
                }).on('fileuploaddone', function (e, data) {
                    $.each(data.result.files, function (index, file) {
                        if (file.url) {
                            var link = $('<a>')
                                    .attr('target', '_blank')
                                    .prop('href', file.url);
                            $(data.context.children()[index])
                                    .wrap(link);
                        } else if (file.error) {
                            var error = $('<span class="text-danger"/>').text(file.error);
                            $(data.context.children()[index])
                                    .append('<br>')
                                    .append(error);
                        }
                    });
                }).on('fileuploadfail', function (e, data) {
                    $.each(data.files, function (index, file) {
                        // todo return translated message from backend
                        var error = $('<span class="text-danger"/>').text('File upload failed.');
                        $(data.context.children()[index])
                                .append('<br>')
                                .append(error);
                    });
                }).prop('disabled', !$.support.fileInput)
                .parent().addClass($.support.fileInput ? undefined : 'disabled');
        });
    </script>
{% endblock %}