{% extends '::base.html.twig' %}

{% block body %}

    <div class="list-view-container clearfix">
        {% for m in musicians %}
            <div class="col-md-3 user-box">
                <a href="{{ path('musician_profile', {'username': m.username}) }}" class="user-box-image-link">
                    <img src="{{ asset(m.images.first.getWebPath|default('/images/placeholder-user.jpg')) | imagine_filter('my_thumb') }}" class="img-circle" />
                </a>
                <div class="user-box-details">
                    <a href="{{ path('musician_profile', {'username': m.username}) }}">{{ m.username }}</a> <br />
                    <span class="user-box-genres"> {% for g in m.genres %}{{ g.name }}{% if not loop.last %} | {% endif %}{% endfor %}</span>
                </div>

            </div>
        {% endfor %}
    </div>

    <div class="map-view-container clearfix">
        <div id="map-canvas" data-url="{{ path('musicians_find') }}" data-lat="{{ app.user.location.lat|default('') }}" data-lng="{{ app.user.location.lng|default('') }}"></div>

        <div class="col-md-3 filter-container">
            {{ form(form) }}
            <div id="distance-slider"></div>
        </div>
    </div>

{% endblock %}


{% block javascripts %}

    <script>
        var map;
        var $map = $('#map-canvas');
        var distanceCircle;
        var bounds = null;
        var donut;

        function initialize() {
            var mapOptions = {
                zoom: 13,
                maxZoom: 13,
                scrollwheel: false,
                zoomControl: true,
                zoomControlOptions: {
                    style: google.maps.ZoomControlStyle.SMALL,
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                }
            };
            map = new google.maps.Map(document.getElementById('map-canvas'),
                    mapOptions);
            bounds = new google.maps.LatLngBounds();
        }

        function getLocation(){
            if (navigator.geolocation){
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            }else{
                alert("Geolocation is not supported by this browser.");
            }
        }
        function showPosition(position){
            map.setCenter(new google.maps.LatLng(parseFloat(position.coords.latitude), position.coords.longitude));
        }

        function showError(error)
        {
            switch(error.code)
            {
                case error.PERMISSION_DENIED:
                    alert("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    alert("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    alert("An unknown error occurred.");
                    break;
            }
        }

        function drawRadius(radius){
            if (typeof donut != 'undefined') donut.setMap(null);

            donut = new google.maps.Polygon({
                paths: [drawCircle(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))), 1000, 1),
                    drawCircle(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))), radius, -1)],
                strokeColor: "gray",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                map: map,
                fillColor: "gray",
                fillOpacity: 0.35
            });
        }

        $(function() {
            initialize();
            if ($map.data('lat') == ''){
                getLocation();
            }else{
                map.setCenter(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))));
            }

            drawRadius($("#search_form_distance").val());


            $("#search_form").parents('form').on('change', function(){
                fetchMapData();
            });

            fetchMapData();

        });

        var markers = [];

        function fetchMapData(){
            var data = $("#search_form").parents('form').serialize();
            var iconBase = 'https://maps.google.com/mapfiles/kml/';
            var url = $map.data('url');
            var infowindow = null;
            $.ajax({
                url: url,
                data: data
            }).done(function( result ) {
                if (result.status == 'success'){
                    deleteMarkers();
                    //distanceCircle.setRadius(parseInt($("#search_form_distance").val()) * 1000);
                    drawRadius($("#search_form_distance").val());
                    $.each(result.data, function(k, v){

                        if (v.me){
                            icon = iconBase + 'pal2/icon2.png';
                        }else{
                            icon = iconBase + 'pal4/icon39.png';
                        }

                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(v.lat, v.lng),
                            map: map,
                            title: v.username,
                            icon: icon
                        });
                        markers.push(marker);

                        var contentString = '<div id="content"><a href="'+ v.url +'"><img src="'+ v.image +'" /><p>'+ v.username +'</p></a></div>';

                        google.maps.event.addListener(marker, 'mouseover', function() {
                            if (infowindow) {
                                infowindow.close();
                            }

                            infowindow = new google.maps.InfoWindow({
                                content: contentString
                            });

                            infowindow.open(map,marker);
                        });

                    });
                }
            });


            // Sets the map on all markers in the array.
            function setAllMap(map) {
                for (var i = 0; i < markers.length; i++) {
                    markers[i].setMap(map);
                }
            }

            // Removes the markers from the map, but keeps them in the array.
            function clearMarkers() {
                setAllMap(null);
            }

            // Deletes all markers in the array by removing references to them.
            function deleteMarkers() {
                clearMarkers();
                markers = [];
            }
        }

        function drawCircle(point, radius, dir) {
            var d2r = Math.PI / 180;   // degrees to radians
            var r2d = 180 / Math.PI;   // radians to degrees
            var earthsradius = 6371; // 3963 is the radius of the earth in miles

            var points = 64;

            // find the raidus in lat/lon
            var rlat = (radius / earthsradius) * r2d;
            var rlng = rlat / Math.cos(point.lat() * d2r);


            var extp = new Array();
            if (dir==1)	{var start=0;var end=points+1} // one extra here makes sure we connect the
            else		{var start=points+1;var end=0}
            for (var i=start; (dir==1 ? i < end : i > end); i=i+dir)
            {
                var theta = Math.PI * (i / (points/2));
                ey = point.lng() + (rlng * Math.cos(theta)); // center a + radius x * cos(theta)
                ex = point.lat() + (rlat * Math.sin(theta)); // center b + radius y * sin(theta)
                extp.push(new google.maps.LatLng(ex, ey));
                bounds.extend(extp[extp.length-1]);
            }
            // alert(extp.length);
                return extp;
        }




    </script>

{% endblock %}