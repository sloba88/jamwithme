{% extends 'JamWebBundle::layout.html.twig' %}

{% block bodyclasses %}page-dashboard{% endblock %}

{% block bodystyle %}background-image: url({{ asset('images/background-dashboard.jpg') }}){% endblock %}

{% block main_content %}


    <div class="row event">

        <div class="col-lg-5 image-box">
            <div class="image-holder">
                <img src="{{ asset('images/events-picture-01.png') }}" alt="Event">
            </div>
            <div class="promo">
                <h4>upcoming event</h4>
                <a href="#" class="link">view all<i class="glyphicon glyphicon-play"></i></a>
            </div>
        </div>

        <div class="col-lg-7 text-box">
            <div class="time">05 Sep 2014
                <a href="#" class="view-details link">view details</a>
            </div>
            <h3>Kompakt at Oz. Amsterdam KOMPAKT Pop Up store</h3>
            <p>
                14:00 - 20:00 | Free entrance<br>
                Oz. | Oudezijds Achterburgwal 66, Amsterdam
            </p>
        </div>

    </div><!--event ends-->

    <div class="filters-area">
        <div class="filters-heading clearfix">
            <h1 class="filters-title">find compatible musicians</h1>
        </div>

        <form id="main-filter-form">
            <div class="filters-by in row">
                <div class="col-sm-12 col-lg-4">
                    <select class="form-control" data-placeholder="Filter by genres" id="filter-genres" name="genres[]" multiple>
                        <option value="0">Filter By Genres</option>
                    </select>
                </div>

                <div class="col-sm-12 col-lg-4">
                    <select class="form-control" data-placeholder="Filter by instruments" id="filter-instruments" name="instruments[]" multiple>
                        <option value="0">Filter By Instruments</option>
                    </select>
                </div>

                <div class="col-sm-12 col-lg-4">
                    <div class="dropdown filter-by-distance">
                        <a id="filter-by-distance-btn" type="button" data-toggle="dropdown" aria-haspopup="true" role="button" aria-expanded="false">
                            Filter by distance
                            <div><b></b></div>
                        </a>
                        <div class="dropdown-menu dropdown-filter-by-distance" role="menu" aria-labelledby="dLabel">
                            <label>Set distance</label>
                            <div id="filter-by-distance-slider"></div>
                            <span class="result slide-min pull-left">0</span>
                            <span class="result slide-max pull-right"></span>
                        </div>
                    </div>
                </div>
            </div><!--filters-by ends-->

            <div class="tabs-activate filters-preview">
                <ul class="clearfix">
                    <li><a href="#" data-tab="1" class="tab-grid is-active">grid</a></li>
                    <li><a href="#" data-tab="2" id="map-view" class="tab-map">map</a></li>
                    <li class="last">
                        <input type="checkbox" id="lessons-checkbox" />
                        <label for="lessons-checkbox">Show only people providing lesions</label>
                    </li>
                </ul>
            </div><!--filters-preview ends-->
        </form>

    </div><!--filters-area ends-->

    <div class="view-tab-container with-scrollbar">
        <div class="view-tab people-listing-grid row is-active" data-tab="1">

        </div><!--people-listing-grid ends-->

        <div class="view-tab map" data-tab="2">

            <div id="map-canvas" data-url="{{ path('musicians_find') }}" data-lat="{{ app.user.location.lat|default('') }}" data-lng="{{ app.user.location.lng|default('') }}"></div>

        </div><!--map ends-->

    </div><!--view-tab-container ends-->

{% endblock %}

{% block right_sidebar_content %}

        {% if is_granted("ROLE_USER") and app.user.profileFulfilment != 100 %}
            <div class="profile-completion clearfix">
                <div class="pick">
                    <div class="pick-outer">
                        <img src="{{ asset('images/pick-outer.png') }}" alt="Profile completion">
                    </div>
                    <span class="pick-inner"></span>
                </div>
                    <div class="profile-completion-text">
                        <h3><span>{{ app.user.profileFulfilment }}%</span>profile completion</h3>
                        <a href="{{ path('fos_user_profile_edit') }}" class="link">fill out your profile</a>
                    </div>
            </div><!--profile-completion ends-->
        {% endif %}


    <div class="shouts-feed">
        <h3>Shouts feed</h3>
        <form role="form" action="{{ path('home') }}" method="POST">
            {{ form_widget(form.text, {'attr': {'class': 'form-control', 'placeholder': 'Shout', 'rows': '3'}}) }}
            {{ form_widget(form.send, {'attr': {'class': 'btn btn-primary'}}) }}
            {{ form_widget(form._token) }}
        </form>
    </div><!--shouts-feed ends-->

    <div class="shouts-listing-container">
        <h4 class="shouts">Shouts</h4>
        <div class="shouts-listing shouts-listing-filter with-scrollbar"></div><!--shouts-listing ends-->
    </div><!--shouts-listing-container ends-->


    <script type="text/template" id="shoutBoxTemplate">
        <% mu = sh.musician %>
        <article class="shout-box clearfix <% if(mu.teacher){ %>teacher<% } %>">
            <a href="{{ app.request.getBaseURL() }}/m/<%- mu.username %>" class="musician-box-image-link img-circle">
                <img src="{{ app.request.getBaseURL() }}/m/<%- mu.username %>/avatar" class="" width="50" />
            </a>
            <div class="shout-text">
                <h4 class="name"><a href="{{ app.request.getBaseURL() }}/m/<%- mu.username %>"><%- mu.username %></a></h4>
                <% if (mu.location) { %><span class="musician-box-location"><i class="glyphicon glyphicon-map-marker"></i> <%- mu.location %></span><% } %>
                <div class="time">
                    <span><%- sh.createdAt %> </span>
                </div>
                <p><%- sh.text %></p>
            </div>
        </article>

    </script>

    <script type="text/template" id="musicianMapBoxTemplate">
        <div class="musician-map-box <% if(mu.teacher){ %>teacher<% } %>">
            <a href="<%- mu.url %>"><img src="<%- mu.image %>" />
                <p><%- mu.username %></p>
            </a>
            <div class="clearfix"></div>
            <span class="musician-map-box-genres">
                    <% _.each( mu.genres, function(v, k){ %>
                        <% if (k!=0){ %>|<% } %>
                        <%- v %>
                    <% }); %>
                </span>
        </div>
    </script>

{% endblock %}

{% block javascripts %}

<script>

    _.templateSettings.variable = "sh";
    var shoutBoxTemplate     = _.template($( "#shoutBoxTemplate" ).html());

    $.ajax({
        url: baseURL+'/shouts/find'
        //data: data
    }).done(function( result ) {
        if (result.status == 'success'){
            $.each(result.data, function(k, v){
                $( ".shouts-listing" ).prepend(shoutBoxTemplate( v ) );
            });
        }
    });


    var map;
    var $map = $('#map-canvas');
    var distanceCircle;
    var bounds = null;
    var donut;
    var iconBase = 'https://maps.google.com/mapfiles/kml/';

    function initializeMap() {

        var mapOptions = {
            zoom: 12,
            maxZoom: 13,
            scrollwheel: false,
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.SMALL,
                position: google.maps.ControlPosition.RIGHT_BOTTOM
            }
        };
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        bounds = new google.maps.LatLngBounds();

        if ($map.data('lat') == ''){
            getLocation();
        }else{
            map.setCenter(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))));
        }

        drawRadius($("#search_form_distance").val());

        renderMapView();

    }

    function getLocation(){
        if (navigator.geolocation){
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        }else{
            alert("Geolocation is not supported by this browser.");
        }
    }
    function showPosition(position){
        map.setCenter(new google.maps.LatLng(parseFloat(position.coords.latitude), position.coords.longitude));
        $map.data('lat', position.coords.latitude);
        $map.data('lng', position.coords.longitude);
        addMyselfOnMap(map);
        //save to database also
    }

    function showError(error) {
        switch(error.code)
        {
            case error.PERMISSION_DENIED:
                alert("User denied the request for Geolocation.");
                break;
            case error.POSITION_UNAVAILABLE:
                alert("Location information is unavailable.");
                break;
            case error.TIMEOUT:
                alert("The request to get user location timed out.");
                break;
            case error.UNKNOWN_ERROR:
                alert("An unknown error occurred.");
                break;
        }
    }

    function drawRadius(radius){
        if (typeof donut != 'undefined') donut.setMap(null);

        donut = new google.maps.Polygon({
            paths: [drawCircle(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))), 1000, 1),
                drawCircle(new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))), radius, -1)],
            strokeColor: "white",
            strokeOpacity: 0.8,
            strokeWeight: 5,
            map: map,
            fillColor: "blue",
            fillOpacity: 0.10
        });
    }

    function addMyselfOnMap(map){
        icon = iconBase + 'pal2/icon2.png';
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(parseFloat($map.data('lat')), parseFloat($map.data('lng'))),
            map: map,
            title: '{{ app.user.username }}',
            icon: icon
        });
        markers.push(marker);
    }

    var delay = (function(){
        var timer = 0;
        return function(callback, ms){
            clearTimeout (timer);
            timer = setTimeout(callback, ms);
        };
    })();

    $(function() {

        $('#map-view').on('click', function(){
            delay(function(){
                initializeMap();
            }, 500);
        });

        if (localStorage.view=="list") {
            $("#list-tab-btn").click();
        }

        $("#main-filter-form").on('change', function(){
            delay(function(){
                filterMusicians();
            }, 500);
        });

        filterMusicians();


        //parse generes
        $.ajax({
            url: Routing.generate('api_genres')
        }).done(function( result ) {
            $.each(result, function(k, v){
                $('#filter-genres').append('<option value="'+v.id+'">'+ v.name + '</option>');
            });

            //parse instruments
            $.ajax({
                url: Routing.generate('api_instruments')
            }).done(function( result ) {
                $.each(result, function(k, v){
                    $('#filter-instruments').append('<option value="'+v.id+'">'+ v.name + '</option>');
                });

                $('select').select2();
            });
        });

        //activate tabs
        tabsToggle($('.tabs-activate'));

        //activates tooltip
        $("[data-toggle=tooltip]").tooltip();

    });

    var markers = [];
    _.templateSettings.variable = "mu";
    var musicianBoxTemplate     = _.template($( "#musicianBoxTemplate" ).html());
    var musicianMapBoxTemplate     = _.template($( "#musicianMapBoxTemplate" ).html());
    var filterResults;

    function filterMusicians(){
        var data='';

        if ( $("#filter-genres").val() != 0 ){
            data += $("#filter-genres").serialize();
        }

        if ( $("#filter-instruments").val() != 0 ){
            data += $("#filter-instruments").serialize();
        }

        if ($("#lessons-checkbox").is(':checked')) {
            data += '&isTeacher=1';
        }
        var url = $map.data('url');

        $.ajax({
            url: url,
            data: data
        }).done(function( result ) {
            if (result.status == 'success') {
                filterResults = result;
                renderGridView();
            }
        });
    }

    function renderGridView() {
        $(".people-listing-grid").html('');
        $.each(filterResults.data, function (k, v) {
            $(".people-listing-grid").append(musicianBoxTemplate(v));
        });
    }

    function renderMapView() {
        var infowindow = null;
        deleteMarkers();
        drawRadius($("#search_form_distance").val());
        $.each(filterResults.data, function (k, v) {
            icon = iconBase + 'pal4/icon39.png';

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(v.lat, v.lng),
                map: map,
                title: v.username,
                icon: icon
            });
            markers.push(marker);

            google.maps.event.addListener(marker, 'mouseover', function() {
                if (infowindow) {
                    infowindow.close();
                }

                infowindow = new google.maps.InfoWindow({
                    content: musicianMapBoxTemplate( v )
                });

                infowindow.open(map,marker);
            });
        });

        addMyselfOnMap(map);

        // Sets the map on all markers in the array.
        function setAllMap(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
            setAllMap(null);
        }

        // Deletes all markers in the array by removing references to them.
        function deleteMarkers() {
            clearMarkers();
            markers = [];
        }
    }

    function fetchMapData(){
        var data='';

        if ( $("#filter-genres").val() != 0 ){
            data += $("#filter-genres").serialize();
        }

        if ( $("#filter-instruments").val() != 0 ){
            data += $("#filter-instruments").serialize();
        }

        if ($("#lessons-checkbox").is(':checked')) {
            data += '&isTeacher=1';
        }

        var url = $map.data('url');
        var infowindow = null;
        $( ".people-listing-grid").html('');
        $.ajax({
            url: url,
            data: data
        }).done(function( result ) {
            if (result.status == 'success'){
                deleteMarkers();
                drawRadius($("#search_form_distance").val());
                $.each(result.data, function(k, v){

                    $( ".people-listing-grid" ).append(musicianBoxTemplate( v ) );

                    icon = iconBase + 'pal4/icon39.png';

                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(v.lat, v.lng),
                        map: map,
                        title: v.username,
                        icon: icon
                    });
                    markers.push(marker);

                    google.maps.event.addListener(marker, 'mouseover', function() {
                        if (infowindow) {
                            infowindow.close();
                        }

                        infowindow = new google.maps.InfoWindow({
                            content: musicianMapBoxTemplate( v )
                        });

                        infowindow.open(map,marker);
                    });

                });

                $(".list-view-container > div ").addClass('col-md-4');

                //add myself on map
                addMyselfOnMap(map);
            }else{
                alert('Please set your location to be able to see people around you');
            }
        });

        // Sets the map on all markers in the array.
        function setAllMap(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
            setAllMap(null);
        }

        // Deletes all markers in the array by removing references to them.
        function deleteMarkers() {
            clearMarkers();
            markers = [];
        }
    }

    function drawCircle(point, radius, dir) {
        var d2r = Math.PI / 180;   // degrees to radians
        var r2d = 180 / Math.PI;   // radians to degrees
        var earthsradius = 6371; // 3963 is the radius of the earth in miles

        var points = 128;

        // find the raidus in lat/lon
        var rlat = (radius / earthsradius) * r2d;
        var rlng = rlat / Math.cos(point.lat() * d2r);


        var extp = new Array();
        if (dir==1)	{var start=0;var end=points+1} // one extra here makes sure we connect the
        else		{var start=points+1;var end=0}
        for (var i=start; (dir==1 ? i < end : i > end); i=i+dir)
        {
            var theta = Math.PI * (i / (points/2));
            ey = point.lng() + (rlng * Math.cos(theta)); // center a + radius x * cos(theta)
            ex = point.lat() + (rlat * Math.sin(theta)); // center b + radius y * sin(theta)
            extp.push(new google.maps.LatLng(ex, ey));
            bounds.extend(extp[extp.length-1]);
        }
        // alert(extp.length);
        return extp;
    }

</script>

{% endblock %}
