{% extends "FOSUserBundle::layout.html.twig" %}

{% block fos_user_content %}
{% include "FOSUserBundle:Profile:edit_content.html.twig" %}
{% endblock fos_user_content %}

{% block javascripts %}
    <link href="{{ asset('/css/jquery.Jcrop.min.css') }}" rel="stylesheet"/>
    <script src="/js/fileupload/vendor/jquery.ui.widget.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="http://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="/js/fileupload/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="/js/fileupload/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="/js/fileupload/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="/js/fileupload/jquery.fileupload-image.js"></script>
    <script src="/js/vendor/jquery.Jcrop.min.js"></script>
    <script>
        $(function () {

            var que = [];

            $(".start").on('click', function(e){
                e.preventDefault();
                if (que.length > 0){
                    $.each(que, function(q, e){
                        e.submit();
                    });
                }

                que = [];
            });
            var imageIndex = 0;
            $('#upload_images').fileupload({
                dataType: 'json',
                autoUpload: false,
                acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                maxFileSize: 5000000, // 5 MB
                // Enable image resizing, except for Android and Opera,
                // which actually support image resizing, but fail to
                // send Blob objects via XHR requests:
                disableImageResize: /Android(?!.*Chrome)|Opera/
                        .test(window.navigator.userAgent),
                previewMaxWidth: 800,
                previewMaxHeight: 800,
                imageMaxWidth: 800,
                imageMaxHeight: 800,
                imageCrop: false,
                previewCrop: false
            }).on('fileuploadadd', function (e, data) {
                data.context = $('<div/>').appendTo('#files');

                $.each(data.files, function (index, file) {
                    var node = $('<p/>')
                    .append('<label>X1 <input type="text" size="4" class="x_cord" id="x1_'+imageIndex+'" name="x1[]" /></label>')
                    .append('<label>Y1 <input type="text" size="4" class="y_cord" id="y1_'+imageIndex+'" name="y1[]" /></label>')
                    .append('<label>X2 <input type="text" size="4" class="x2_cord" id="x2_'+imageIndex+'" name="x2[]" /></label>')
                    .append('<label>Y2 <input type="text" size="4" class="y2_cord" id="y2_'+imageIndex+'" name="y2[]" /></label>')
                    .append('<label>W <input type="text" size="4"  class="w_cord" id="w_'+imageIndex+'" name="w[]" /></label>')
                    .append('<label>H <input type="text" size="4"  class="h_cord"id="h_'+imageIndex+'" name="h[]" /></label>');
                    imageIndex++;
                    que.push(data);
                    node.appendTo(data.context);
                });
            }).on('fileuploadsubmit', function (e, data) {
                        var inputs = data.context.find(':input');
                        if (inputs.filter(function () {
                            return !this.value && $(this).prop('required');
                        }).first().focus().length) {
                            data.context.find('button').prop('disabled', false);
                            return false;
                        }
                        data.formData = inputs.serializeArray();
            }).on('fileuploadprocessalways', function (e, data) {
                var index = data.index,
                        file = data.files[index],
                        node = $(data.context.children()[index]);
                if (file.preview) {
                    node
                            .prepend('<br>')
                            .prepend(file.preview);
                }
                if (file.error) {
                    node
                            .append('<br>')
                            .append($('<span class="text-danger"/>').text(file.error));
                }
                if (index + 1 === data.files.length) {
                    data.context.find('button')
                            .text('Upload')
                            .prop('disabled', !!data.files.error);
                }

                var jcrop_api;

                $(file.preview).Jcrop({
                    onChange:   showCoords,
                    onSelect:   showCoords,
                    onRelease:  clearCoords
                },function(){
                    jcrop_api = this;
                });

                function showCoords(c){
                    node.find('input.x_cord').val(c.x);
                    node.find('input.y_cord').val(c.y);
                    node.find('input.x2_cord').val(c.x2);
                    node.find('input.y2_cord').val(c.y2);
                    node.find('input.w_cord').val(c.w);
                    node.find('input.h_cord').val(c.h);
                };

                function clearCoords(){
                    $('#coords input').val('');
                };



            }).on('fileuploadprogressall', function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                $('#progress .progress-bar').css(
                    'width',
                    progress + '%'
                );
                if (progress==100){
                    setTimeout(function(){
                        //window.location.reload();
                    },200)
                }
            }).on('fileuploaddone', function (e, data) {
                $.each(data.result.files, function (index, file) {
                    if (file.url) {
                        var link = $('<a>')
                                .attr('target', '_blank')
                                .prop('href', file.url);
                        $(data.context.children()[index])
                                .wrap(link);
                    } else if (file.error) {
                        var error = $('<span class="text-danger"/>').text(file.error);
                        $(data.context.children()[index])
                                .append('<br>')
                                .append(error);
                    }
                });
            }).on('fileuploadfail', function (e, data) {
                $.each(data.files, function (index, file) {
                    var error = $('<span class="text-danger"/>').text('File upload failed.');
                    $(data.context.children()[index])
                            .append('<br>')
                            .append(error);
                });
            }).prop('disabled', !$.support.fileInput)
                    .parent().addClass($.support.fileInput ? undefined : 'disabled');
        });
    </script>
{% endblock %}